install.packages("accelerometrey")
install.packages("accelerometry")
# Load in sample data from NHANES 2003-2004 [3]
data(unidata)
# Get data from ID number 21005
id.part1 <- unidata[unidata[, "seqn"] == 21005, "seqn"]
days.part1 <- unidata[unidata[, "seqn"] == 21005, "paxday"]
counts.part1 <- unidata[unidata[, "seqn"] == 21005, "paxinten"]
# Identify periods of valid wear time
weartime.flag <- accel.weartime(counts = counts.part1)
# Flag minutes that are part of a moderate-to-vigorous activity bout
mvpa.bouts.flag <- accel.bouts(counts = counts.part1, weartime = weartime.flag,
thresh.lower = 2020)
# Obtain maximum 10-minute count average
max.10min.movingave <- movingaves(x = counts.part1, window = 10, return.max = TRUE)
# Process data from ID 21005 and request per-day variables and daily averages
accel.list <- accel.process.uni(counts = counts.part1,  id = id.part1, return.form = 3)
# Process data according to methods used in NCI's SAS programs [5]
accel.nci <- accel.process.uni(counts = counts.part1, id = id.part1, nci.methods = TRUE,
brevity = 2, return.form = 3)
# Load in triaxial sample data
data(tridata)
# Process data and request per-day variables
accel.days <- accel.process.tri(counts = tridata[, 1:3], steps = tridata[, 4])
# Process data, but for non-wear detection use triaxial vector magnitude with 90-
# minute window and two-minute tolerance for nonzero counts up to 200
accel.days <- accel.process.tri(counts = tridata[, 1:3], steps = tridata[, 4],
nonwear.axis = "mag", nonwear.window = 90,
nonwear.tol = 2, nonwear.tol.upper = 200)
require(accelerometry)# Load in sample data from NHANES 2003-2004 [3]
data(unidata)
unidata
# Get data from ID number 21005
id.part1 <- unidata[unidata[, "seqn"] == 21005, "seqn"]
days.part1 <- unidata[unidata[, "seqn"] == 21005, "paxday"]
counts.part1 <- unidata[unidata[, "seqn"] == 21005, "paxinten"]
# Identify periods of valid wear time
weartime.flag <- accel.weartime(counts = counts.part1)
# Flag minutes that are part of a moderate-to-vigorous activity bout
mvpa.bouts.flag <- accel.bouts(counts = counts.part1, weartime = weartime.flag,
thresh.lower = 2020)
# Obtain maximum 10-minute count average
max.10min.movingave <- movingaves(x = counts.part1, window = 10, return.max = TRUE)
# Process data from ID 21005 and request per-day variables and daily averages
accel.list <- accel.process.uni(counts = counts.part1,  id = id.part1, return.form = 3)
# Process data according to methods used in NCI's SAS programs [5]
accel.nci <- accel.process.uni(counts = counts.part1, id = id.part1, nci.methods = TRUE,
brevity = 2, return.form = 3)
# Load in triaxial sample data
data(tridata)
# Process data and request per-day variables
accel.days <- accel.process.tri(counts = tridata[, 1:3], steps = tridata[, 4])
head(tridata)
# Process data and request per-day variables
accel.days <- accel.process.tri(counts = tridata[, 1:3], steps = tridata[, 4])
# Process data, but for non-wear detection use triaxial vector magnitude with 90-
# minute window and two-minute tolerance for nonzero counts up to 200
accel.days <- accel.process.tri(counts = tridata[, 1:3], steps = tridata[, 4],
nonwear.axis = "mag", nonwear.window = 90,
nonwear.tol = 2, nonwear.tol.upper = 200)
require(accelerometry)
# Process data, but for non-wear detection use triaxial vector magnitude with 90-
# minute window and two-minute tolerance for nonzero counts up to 200
accel.days <- accel.process.tri(counts = tridata[, 1:3], steps = tridata[, 4],
nonwear.axis = "mag", nonwear.window = 90,
nonwear.tol = 2, nonwear.tol.upper = 200)
accelerometry::process_tri(tridata)
?process_tri
a<-read.table(file = "accel.txt",sep="\t")
head(a)
process_tri(a)
plot(a$V1)
plot(a$V2)
plot(a$V3)
a<-read.table(file = "accel.txt",sep="\t")
a
plot(a$V1)
plot(a$V1,pch=16,cex=0.5)
plot(a$V2,pch=16,cex=0.5)
plot(a$V2,pch=16,cex=0.5);lines(a$V2)
plot(a$V1,pch=16,cex=0.5);lines(a$V1)
plot(a$V2,pch=16,cex=0.5);lines(a$V2)
plot(a$V3,pch=16,cex=0.5);lines(a$V3)
plot(a$V2,a$V3,pch=16,cex=0.5)
library(devtools);
install_github("MonteShaffer/mPowerEI", subdir="mPowerEI");
library(mPowerEI);
scaleToTimeIncrement
# turning points
?pastecs::turnpoints
data(marbio)
turnpoints(a$V1)
library(mPowerEI);
install_github("MonteShaffer/mPowerEI", subdir="mPowerEI");
library(mPowerEI);
pastecs
install.packages("pastecs")
require(pastecs)
data(marbio)
plot(marbio[, "Nauplii"], type = "l")
# Calculate turning points for this series
Nauplii.tp <- turnpoints(marbio[, "Nauplii"])
summary(Nauplii.tp)
plot(Nauplii.tp)
# Add envelope and median line to original data
plot(marbio[, "Nauplii"], type = "l")
lines(Nauplii.tp)
# Note that lines() applies to the graph of original dataset
title("Raw data, envelope maxi., mini. and median lines")
# Calculate turning points for this series
Nauplii.tp <- turnpoints(a[, "V1"])
summary(Nauplii.tp)
plot(Nauplii.tp)
plot(a[, "V1"], type = "l")
# Calculate turning points for this series
Nauplii.tp <- turnpoints(a[, "V1"])
summary(Nauplii.tp)
plot(Nauplii.tp)
# Add envelope and median line to original data
plot(marbio[, "Nauplii"], type = "l")
lines(Nauplii.tp)
# Note that lines() applies to the graph of original dataset
title("Raw data, envelope maxi., mini. and median lines")
a<-read.table("accel.txt")
plot(a$V1,pch=16,cex=0.5);lines(a$V1)
plot(a$V2,pch=16,cex=0.5);lines(a$V2)
plot(a$V3,pch=16,cex=0.5);lines(a$V3)
plot(a$V2,a$V3,pch=16,cex=0.5)
library(devtools);
library(mPowerEI);
# data smoothing
?scaleToTimeIncrement
# data smoothing
bb<-scaleToTimeIncrement(a$V1,increment = 250)
plot(bb, type = "l")
bb
# data smoothing
bb<-scaleToTimeIncrement(a$V1,increment = 250)
unlist(bb)
bb
scaleToTimeIncrement(a$V1,increment = 250)
plot(a$V1, type = "l")
# Calculate turning points for this series
Nauplii.tp <- turnpoints(a[, "V1"])
summary(Nauplii.tp)
plot(Nauplii.tp)
# Add envelope and median line to original data
plot(marbio[, "Nauplii"], type = "l")
lines(Nauplii.tp)
# Note that lines() applies to the graph of original dataset
title("Raw data, envelope maxi., mini. and median lines")
plot(a$V1[1000:1877,], type = "l")
plot(a$V1[1000:1877], type = "l")
# Calculate turning points for this series
Nauplii.tp <- turnpoints(a[, "V1"])
summary(Nauplii.tp)
plot(Nauplii.tp)
plot(a$V1, type = "l")
b<-NA
for(i in 2:length(a$V1)){a[i]<-a[i]-a[i-1]}
for(i in 2:length(a$V1)){a[i]<-a[i]-a[i-1]}
length(a$V1)
i=10
# Calculate turning points for this series
Nauplii.tp <- turnpoints(a[, "V1"])
summary(Nauplii.tp)
a$V1[i]-a$V1[i-1]}
a$V1[i]-a$V1[i-1]
for(i in 2:length(a$V1)){a[i]<-a$V1[i]-a$V1[i-1]}
source('~/.active-rstudio-document', echo=TRUE)
a<-read.table("accel.txt")
plot(a$V1,pch=16,cex=0.5);lines(a$V1)
plot(a$V2,pch=16,cex=0.5);lines(a$V2)
plot(a$V3,pch=16,cex=0.5);lines(a$V3)
plot(a$V1, type = "l")
b<-NA
for(i in 2:length(a$V1)){b[i]<-a$V1[i]-a$V1[i-1]}
b
plot(b)
smooth(b)
b
View(v)
View(b)
which(is.na(b))
b<-0
for(i in 2:length(a$V1)){b[i]<-a$V1[i]-a$V1[i-1]}
b
plot(b)
plot(b)
smooth(b)
plot(b,pch="");lines(b)
plot(b,pch=16,cex=0.5);lines(b)
plot(smooth(b))
plot(b,pch=16,cex=0.5);lines(b)
require(mclust
)
require(mclust)
cluster(b)
Mclust(b)
bb<-Mclust(b)
summary(bb)
plot(bb)
plot(b,pch=16,cex=0.5);lines(b)
plot(b,pch=16,cex=0.5);lines(b,col="grey")
plot(b,pch=16,cex=0.5);lines(b)
plot(b,pch=16,cex=0.5,col="red");lines(b)
require(mclust)
