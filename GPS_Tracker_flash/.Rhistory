gps[-(is.na(gps$V1)),]
gps<-gps[-(is.na(gps$V1)),]
gps<-read.csv("test.data.csv",header=F)
gps<-gps[-(is.na(gps$V1)),]
gps<-read.csv("test.data.csv",header=F)
gps<-read.csv("test.data.csv",header=F)
gps$APCP<-substr(gps$V1,start = 2,stop = 3)
gps$V1<-substr(gps$V1,start = 4,14)
gps<-gps[-(is.na(gps$V1)),]
gps<-read.csv("test.data.csv",header=F)
gps$APCP<-substr(gps$V1,start = 2,stop = 3)
gps$V1<-substr(gps$V1,start = 4,14)
gps<-read.csv("test.data.csv",header=F)
gps$APCP<-substr(gps$V1,start = 2,stop = 3)
gps$V1<-substr(gps$V1,start = 4,14)
gps<-gps[-(is.na(gps$V1)),]
gps$V1<-as.integer(gps$V1)
gps$V1==""
gps<-read.csv("test.data.csv",header=F)
gps$APCP<-substr(gps$V1,start = 2,stop = 3)
gps$V1<-substr(gps$V1,start = 4,14)
gps$V1<-as.integer(gps$V1)
gps<-read.csv("test.data.csv",header=F)
gps$APCP<-substr(gps$V1,start = 2,stop = 3)
gps$V1<-substr(gps$V1,start = 4,14)
gps$V1<-as.integer(gps$V1)
gps<-gps[-(is.na(gps$V1)),]
gps<-read.csv("test.data.csv",header=F)
gps$APCP<-substr(gps$V1,start = 2,stop = 3)
gps$V1<-substr(gps$V1,start = 4,14)
gps$V1<-as.integer(gps$V1)
is.na(gps$V1)
summary(factor(is.na(gps$V1)))
gps<-gps[!is.na(gps$V1)),]
gps<-gps[!is.na(gps$V1),]
lubridate::hms(gps$V1)
lubridate::hms(gps$V1[1])
View(gps)
lubridate::hms("150323")
lubridate::("150323",format="%h%m%s")
lubridate::hms("150323",format="%h%m%s")
strptime("150323",format="%h%m%s")
strptime("150323",format="%H%M%S")
lubridate::hms(strptime("150323",format="%H%M%S")
)
strptime(gps$V1,format="%H%M%S")
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps<-read.csv("test.data.csv",header=F)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
View(gps)
View(gps)
gps<-read.csv("test.data.csv",header=F)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
View(gps)
gps<-read.csv("test.data.csv",header=F)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps$APCP<-substr(gps$V1,start = 2,stop = 3)
substr(gps$V1,start = 2,stop = 3)
gps<-read.csv("test.data.csv",header=F)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps<-read.csv("test.data.csv",header=F)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
strptime(gps$time,format="%H%M%S")
gps$time<-strptime(gps$time,format="%H%M%S")
View(cp)
(as.numeric(substr(gps$V2,start = 1,stop = 2))+(as.numeric(substr(gps$V2,start = 3,stop = 8))/60))
as.numeric(substr(gps$V2,start = 1,stop = 2))
gps$
gps
gps<-read.csv("test.data.csv",header=F)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time<-strptime(gps$time,format="%H%M%S")
gps$time
gps<-as.data.frame(gps)
gps$lat
(substr(gps$lat,start = 1,stop = 2))
as.numeric(substr(gps$lat,start = 1,stop = 2))
as.numeric(substr(gps$lat,start = 1,stop = 2))
(as.numeric(substr(gps$lat,start = 1,stop = 2))+(as.numeric(substr(gps$lat,start = 3,stop = 8))/60))
gps$lat<-(as.numeric(substr(gps$lat,start = 1,stop = 2))+(as.numeric(substr(gps$lat,start = 3,stop = 8))/60))
library(measurements)
install.packages("measurements")
library(measurements)
gps<-read.csv("test.data.csv",header=F)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time<-strptime(gps$time,format="%H%M%S")
measurements::conv_unit(gps$lat, from = 'deg_dec_min', to = 'dec_deg')
measurements::conv_unit(gps$lat, from = 'deg_dec_min', to = 'dec_deg')
?conv_unit
measurements::conv_unit(gps$lat, from = 'dec_deg', to = 'dec_deg')
# convert from decimal minutes to decimal degrees
gps$lat = measurements::conv_unit(gps$lat, from = 'dec_deg', to = 'deg_dec_min')
measurements::conv_unit(gps$lat, from = 'dec_deg', to = 'deg_dec_min')
library(measurements)
gps<-read.csv("test.data.csv",header=F)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time<-strptime(gps$time,format="%H%M%S")
measurements::conv_unit(gps$lat, from = 'dec_deg', to = 'deg_dec_min')
gps$lat
library(measurements)
gps<-read.csv("test.data.csv",header=F)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time<-strptime(gps$time,format="%H%M%S")
# convert from decimal minutes to decimal degrees
gps$lat
as.numeric(substr(gps$lat,start = 1,stop = 2))
(as.numeric(substr(gps$lat,start = 1,stop = 2))+(as.numeric(substr(gps$lat,start = 3,stop = 8))/60))
gps$lon<-(as.numeric(substr(gps$lon,start = 1,stop = 2))+(as.numeric(substr(gps$lon,start = 3,stop = 8))/60))
gps$lon
View(gps)
library(measurements)
gps<-read.csv("test.data.csv",header=F)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time<-strptime(gps$time,format="%H%M%S")
# convert from decimal minutes to decimal degrees
View(gps)
library(measurements)
gps<-read.csv("test.data.csv",header=F)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time<-strptime(gps$time,format="%H%M%S")
# convert from decimal minutes to decimal degrees
gps$lat<-(as.numeric(substr(gps$lat,start = 1,stop = 2))+(as.numeric(substr(gps$lat,start = 3,stop = 8))/60))
gps$lon<-(as.numeric(substr(gps$lon,start = 1,stop = 2))+(as.numeric(substr(gps$lon,start = 3,stop = 8))/60))
library(measurements)
gps<-read.csv("test.data.csv",header=F)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time<-strptime(gps$time,format="%H%M%S")
# convert from decimal minutes to decimal degrees
getGPRMC <- function(data) {
ans <- list(rmc=NULL, rest=data)
rxp <- "\\$GPRMC(,[^,]*){12}\\*[0-9,A-F]{2}\r\n"
beg <- regexpr(rxp, data)
if(beg == -1) return(ans)
end <- beg + attr(beg, "match.length")
sub <- substr(data, beg, end - 6)
ans$rmc <- strsplit(sub, ",")[[1]]
names(ans$rmc) <- c("id","utc","status","lat","N/S",
"long","E/W","knots","cog","date",
"mag","E/W","mode")
ans$rest <- substr(data, end, nchar(data))
return(ans)
}
getAllGPRMC <- function(data) {
res <- getGPRMC(data)
ans <- res$rmc
while(!is.null(res$rmc)) {
ans <- rbind(ans, res$rmc)
res <- getGPRMC(res$rest)
}
return(ans)
}
getGPRMC(data = gps)
substrRight <- function(x, n){substr(x, nchar(x)-n+1, nchar(x))}}
substrRight <- function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
substrRight(x = gps$lat,2)
gps<-read.csv("test.data.csv",header=F)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time<-strptime(gps$time,format="%H%M%S")
substrRight <- function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
gps$lat
substrRight(x = gps$lat,n = 2)
substrRight(x = as.character(gps$lat,n = 2))
substrRight(x = as.character(gps$lat),n = 2)
substrRight(x = as.character(gps$lat),n = 7)
gsub(pattern = substrRight(x = as.character(gps$lat),n = 7),replacement = paste(" ",substrRight(x = as.character(gps$lat),n = 7),sep="")
)
gsub(pattern = substrRight(x = as.character(gps$lat),n = 7),replacement = paste(" ",substrRight(x = as.character(gps$lat),n = 7),sep=""),x = gps$lat)
paste(" ",substrRight(x = as.character(gps$lat),n = 7),sep="")
gsub(pattern = substrRight(x = as.character(gps$lat),n = 7),replacement = paste(" ",substrRight(x = as.character(gps$lat),n = 7),sep=""),x = gps$lat)
paste(" ",substrRight(x = as.character(gps$lat),n = 7),sep="")
gsub(pattern = substrRight(x = as.character(gps$lat),n = 7),replacement = paste(" ",substrRight(x = as.character(gps$lat),n = 7),sep=""),x = gps$lat)
substrRight(x = as.character(gps$lat),n = 7)
paste(" ",substrRight(x = as.character(gps$lat),n = 7),sep="")
gsub(pattern = substrRight(x = as.character(gps$lat),n = 7),replacement = paste(" ",substrRight(x = as.character(gps$lat),n = 7),sep=""),x = as.character(gps$lat))
substrRight(x = as.character(gps$lat),n = 7)
gsub(pattern = substrRight(x = as.character(gps$lat),n = 7),replacement = paste(" ",substrRight(x = as.character(gps$lat),n = 7),sep=""),x = as.character(gps$lat),ignore.case = T)
gsub(pattern = substrRight(x = as.character(gps$lat[1]),n = 7),replacement = paste(" ",substrRight(x = as.character(gps$lat[1]),n = 7),sep=""),x = as.character(gps$lat[1]),ignore.case = T)
measurements::conv_unit(x$lat, from = 'deg_dec_min', to = 'dec_deg')
measurements::conv_unit("51 31.6739", from = 'deg_dec_min', to = 'dec_deg')
i=gps$lat[3]
i
gsub(pattern = substrRight(x = as.character(i),n = 7),replacement = paste(" ",substrRight(x = as.character(i),n = 7),sep=""),x = as.character(i),ignore.case = T)
convert.nmea.gps<-function(lat,lon)
{
lat.conv<-gsub(pattern = substrRight(x = as.character(lat),n = 7),replacement = paste(" ",substrRight(x = as.character(lat),n = 7),sep=""),x = as.character(lat),ignore.case = T)
return(lat.conv)
}
convert.nmea.gps(gps$lat[4])
convert.nmea.gps<-function(lat,lon)
{
lat.conv<-gsub(pattern = substrRight(x = as.character(lat),n = 7),replacement = paste(" ",substrRight(x = as.character(lat),n = 7),sep=""),x = as.character(lat),ignore.case = T)
lat.conv<-measurements::conv_unit(lat.conv, from = 'deg_dec_min', to = 'dec_deg')
lon.conv<-gsub(pattern = substrRight(x = as.character(lat),n = 7),replacement = paste(" ",substrRight(x = as.character(lat),n = 7),sep=""),x = as.character(lat),ignore.case = T)
lon.conv<-measurements::conv_unit(lon.conv, from = 'deg_dec_min', to = 'dec_deg')
output<-c(lat.conv,lon.conv)
return(output)
}
convert.nmea.gps(gps$lat[4],gps$lon[4])
convert.nmea.gps<-function(lat,lon)
{
lat.conv<-gsub(pattern = substrRight(x = as.character(lat),n = 7),replacement = paste(" ",substrRight(x = as.character(lat),n = 7),sep=""),x = as.character(lat),ignore.case = T)
lat.conv<-measurements::conv_unit(lat.conv, from = 'deg_dec_min', to = 'dec_deg')
lon.conv<-gsub(pattern = substrRight(x = as.character(lon),n = 7),replacement = paste(" ",substrRight(x = as.character(lon),n = 7),sep=""),x = as.character(lon),ignore.case = T)
lon.conv<-measurements::conv_unit(lon.conv, from = 'deg_dec_min', to = 'dec_deg')
output<-c(lat.conv,lon.conv)
return(output)
}
convert.nmea.gps(gps$lat[4],gps$lon[4])
gps$lon[4]
library(measurements)
gps<-read.csv("test.data.csv",header=F)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time<-strptime(gps$time,format="%H%M%S")
convert.nmea.gps<-function(lat,lon)
{
lat.conv<-gsub(pattern = substrRight(x = as.character(lat),n = 7),replacement = paste(" ",substrRight(x = as.character(lat),n = 7),sep=""),x = as.character(lat),ignore.case = T)
lat.conv<-measurements::conv_unit(lat.conv, from = 'deg_dec_min', to = 'dec_deg')
lon.conv<-gsub(pattern = substrRight(x = as.character(lon),n = 7),replacement = paste(" ",substrRight(x = as.character(lon),n = 7),sep=""),x = as.character(lon),ignore.case = T)
lon.conv<-measurements::conv_unit(lon.conv, from = 'deg_dec_min', to = 'dec_deg')
output<-c(lat.conv,lon.conv)
return(output)
}
View(gps)
convert.nmea.gps(lat = gps$lat[200],lon = gps$lon[200])
library(measurements)
gps<-read.csv("test.data.csv",header=F)
View(gps)
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time<-strptime(gps$time,format="%H%M%S")
convert.nmea.gps<-function(lat,ns,lon,we)
{
lat.conv<-gsub(pattern = substrRight(x = as.character(lat),n = 7),replacement = paste(" ",substrRight(x = as.character(lat),n = 7),sep=""),x = as.character(lat),ignore.case = T)
lat.conv<-measurements::conv_unit(lat.conv, from = 'deg_dec_min', to = 'dec_deg')
if(ns=="S"){lat.conv<-paste("-",lat.conv,sep="")}
lon.conv<-gsub(pattern = substrRight(x = as.character(lon),n = 7),replacement = paste(" ",substrRight(x = as.character(lon),n = 7),sep=""),x = as.character(lon),ignore.case = T)
lon.conv<-measurements::conv_unit(lon.conv, from = 'deg_dec_min', to = 'dec_deg')
if(we=="W"){lon.conv<-paste("-",lon.conv,sep="")}
output<-c(lat.conv,lon.conv)
return(output)
}
gps<-read.csv("test.data.csv",header=F)
View(gps)
gps<-read.csv("test.data.csv",header=F,na.strings = "")
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time<-strptime(gps$time,format="%H%M%S")
convert.nmea.gps<-function(lat,ns,lon,we)
{
lat.conv<-gsub(pattern = substrRight(x = as.character(lat),n = 7),replacement = paste(" ",substrRight(x = as.character(lat),n = 7),sep=""),x = as.character(lat),ignore.case = T)
lat.conv<-measurements::conv_unit(lat.conv, from = 'deg_dec_min', to = 'dec_deg')
if(ns=="S"){lat.conv<-paste("-",lat.conv,sep="")}
lon.conv<-gsub(pattern = substrRight(x = as.character(lon),n = 7),replacement = paste(" ",substrRight(x = as.character(lon),n = 7),sep=""),x = as.character(lon),ignore.case = T)
lon.conv<-measurements::conv_unit(lon.conv, from = 'deg_dec_min', to = 'dec_deg')
if(we=="W"){lon.conv<-paste("-",lon.conv,sep="")}
output<-c(lat.conv,lon.conv)
return(output)
}
cp<-gps
gps<-read.csv("test.data.csv",header=F,na.strings = "")
gps<-read.csv("test.data.csv",header=F,na.strings = "")
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
gps<-read.csv("test.data.csv",header=F,na.strings = "")
cp<-gps[grep(gps$V1,pattern = "CP"),]
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum")
length(c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","checksum"))
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time<-strptime(gps$time,format="%H%M%S")
convert.nmea.gps<-function(lat,ns,lon,we)
{
lat.conv<-gsub(pattern = substrRight(x = as.character(lat),n = 7),replacement = paste(" ",substrRight(x = as.character(lat),n = 7),sep=""),x = as.character(lat),ignore.case = T)
lat.conv<-measurements::conv_unit(lat.conv, from = 'deg_dec_min', to = 'dec_deg')
if(ns=="S"){lat.conv<-paste("-",lat.conv,sep="")}
lon.conv<-gsub(pattern = substrRight(x = as.character(lon),n = 7),replacement = paste(" ",substrRight(x = as.character(lon),n = 7),sep=""),x = as.character(lon),ignore.case = T)
lon.conv<-measurements::conv_unit(lon.conv, from = 'deg_dec_min', to = 'dec_deg')
if(we=="W"){lon.conv<-paste("-",lon.conv,sep="")}
output<-c(lat.conv,lon.conv)
return(output)
}
convert.nmea.gps(lat = gps$lat,ns = gps$n_s,lon = gps$lon,we = gps$w_e)
convert.nmea.gps(lat = gps$lat[1],ns = gps$n_s[1],lon = gps$lon[1],we = gps$w_e[1])
paste("-",lon.conv,sep="")
gps<-read.csv("test.data.csv",header=F,na.strings = "")
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time<-strptime(gps$time,format="%H%M%S")
convert.nmea.gps<-function(lat,ns,lon,we)
{
lat.conv<-gsub(pattern = substrRight(x = as.character(lat),n = 7),replacement = paste(" ",substrRight(x = as.character(lat),n = 7),sep=""),x = as.character(lat),ignore.case = T)
lat.conv<-measurements::conv_unit(lat.conv, from = 'deg_dec_min', to = 'dec_deg')
if(ns=="S"){lat.conv<-paste("-",lat.conv,sep="")}
lon.conv<-gsub(pattern = substrRight(x = as.character(lon),n = 7),replacement = paste(" ",substrRight(x = as.character(lon),n = 7),sep=""),x = as.character(lon),ignore.case = T)
lon.conv<-measurements::conv_unit(lon.conv, from = 'deg_dec_min', to = 'dec_deg')
if(we=="W"){lon.conv<-paste("-",lon.conv,sep="")}
output<-c(lat.conv,lon.conv)
return(output)
}
convert.nmea.gps(lat = gps$lat[1],ns = gps$n_s[1],lon = gps$lon[1],we = gps$w_e[1])
gps<-gps[-which(is.na(gps$lat)),]
library(measurements)
gps<-read.csv("test.data.csv",header=F,na.strings = "")
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
strptime(gps$time,format="%H%M%S")
strptime(gps$time,format="%H%M%S")
lubridate::hms(gps$time,format="%H%M%S")
lubridate::hms(gps$time)
substrRight
substrRight<-function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
substrRight(x = gps$time)
substrRight(x = gps$time,n = 2)
gps$time<-gsub(pattern = substrRight(x = gps$time,n = 2),replacement = paste("-",substrRight(x = gps$time,n = 2),sep="")
gps$time
)
gps$time<-gsub(pattern = substrRight(x = gps$time,n = 2),replacement = paste("-",substrRight(x = gps$time,n = 2),sep=""))
gps$time<-gsub(x = gps$time,pattern = substrRight(x = gps$time,n = 2),replacement = paste("-",substrRight(x = gps$time,n = 2),sep=""))
substrRight(x = gps$time,n = 2)
paste("-",substrRight(x = gps$time,n = 2)))
paste("-",substrRight(x = gps$time,n = 2))
paste("-",substrRight(x = gps$time,n = 2),sep="")
gsub(x = gps$time,pattern = substrRight(x = gps$time,n = 2), replacement = (paste("-",substrRight(x = gps$time,n = 2),sep=""))
)
gsub(pattern = substrRight(x = as.character(gps$time),n = 2),replacement = paste(" ",substrRight(x = as.character(gps$time),n = 2),sep=""),x = as.character(gps$time),ignore.case = T)
length(gps$time==5)
which(length(gps$time==5))
which(length(gps$time)==5)
which(nchar(gps$time)==5)
paste("0",gps$time[which(nchar(gps$time)==5)])
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
library(measurements)
########################################################################################
#define substring right function
substrRight<-function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(lat,ns,lon,we)
{
lat.conv<-gsub(pattern = substrRight(x = as.character(lat),n = 7),replacement = paste(" ",substrRight(x = as.character(lat),n = 7),sep=""),x = as.character(lat),ignore.case = T)
lat.conv<-measurements::conv_unit(lat.conv, from = 'deg_dec_min', to = 'dec_deg')
if(ns=="S"){lat.conv<-paste("-",lat.conv,sep="")}
lon.conv<-gsub(pattern = substrRight(x = as.character(lon),n = 7),replacement = paste(" ",substrRight(x = as.character(lon),n = 7),sep=""),x = as.character(lon),ignore.case = T)
lon.conv<-measurements::conv_unit(lon.conv, from = 'deg_dec_min', to = 'dec_deg')
if(we=="W"){lon.conv<-paste("-",lon.conv,sep="")}
output<-c(lat.conv,lon.conv)
return(output)
}
gps<-read.csv("test.data.csv",header=F,na.strings = "")
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
gps$time<-strptime(gps$time,format="%H%M%S")
gps$time
library(measurements)
########################################################################################
#define substring right function
substrRight<-function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(lat,ns,lon,we)
{
lat.conv<-gsub(pattern = substrRight(x = as.character(lat),n = 7),replacement = paste(" ",substrRight(x = as.character(lat),n = 7),sep=""),x = as.character(lat),ignore.case = T)
lat.conv<-measurements::conv_unit(lat.conv, from = 'deg_dec_min', to = 'dec_deg')
if(ns=="S"){lat.conv<-paste("-",lat.conv,sep="")}
lon.conv<-gsub(pattern = substrRight(x = as.character(lon),n = 7),replacement = paste(" ",substrRight(x = as.character(lon),n = 7),sep=""),x = as.character(lon),ignore.case = T)
lon.conv<-measurements::conv_unit(lon.conv, from = 'deg_dec_min', to = 'dec_deg')
if(we=="W"){lon.conv<-paste("-",lon.conv,sep="")}
output<-c(lat.conv,lon.conv)
return(output)
}
########################################################################################
gps<-read.csv("test.data.csv",header=F,na.strings = "")
cp<-gps[grep(gps$V1,pattern = "CP"),]
gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
gps<-gps[-which(is.na(gps$lat)),]
convert.nmea.gps(lat = gps$lat[1],ns = gps$n_s[1],lon = gps$lon[1],we = gps$w_e[1])
convert.nmea.gps(lat = gps$lat,ns = gps$n_s,lon = gps$lon,we = gps$w_e)
convert.nmea.gps(lat = gps$lat[i],ns = gps$n_s[i],lon = gps$lon[i],we = gps$w_e[i])
gpsconv<-NA
gpsconv<-as.data.frame(c(NA,NA))
View(gpsconv)
gpsconv<-as.data.frame("lat")
View(gpsconv)
gpsconv$lon<-NA
return(loc.conv)
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc,nsew)
{
loc<-gsub(pattern = substrRight(x = as.character(loc),n = 7),replacement = paste(" ",substrRight(x = as.character(loc),n = 7),sep=""),x = as.character(loc),ignore.case = T)
loc.conv<-measurements::conv_unit(loc, from = 'deg_dec_min', to = 'dec_deg')
if(nsew=="S"){loc.conv<-paste("-",loc.conv,sep="")}
if(nsew=="W"){loc.conv<-paste("-",loc.conv,sep="")}
return(loc.conv)
}
