gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
gps$time<-strptime(gps$time,format="%H%M%S")
gps<-gps[-which(is.na(gps$lat)),]
gps$lat
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=gps$lon, lat=gps$lat)
m  # Print the map
convert.nmea.gps(loc = gps$lat[i],nsew = gps$n_s[i])
for(i in 1:nrow(gps))
{
gps$lat[i]<-convert.nmea.gps(loc = gps$lat[i],nsew = gps$n_s[i])
}
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=gps$lon, lat=gps$lat)
m  # Print the map
gps$lat[i]
library(measurements)
library(leaflet)
########################################################################################
#define substring right function
substrRight<-function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc,nsew)
{
if(nsew=="N" | nsew=="S"){loc<-gsub(pattern = substrRight(x = as.character(loc),n = 7),replacement = paste(" ",substrRight(x = as.character(loc),n = 7),sep=""),x = as.character(loc),ignore.case = T)}
if(nsew=="W" | nsew=="E"){loc<-gsub(pattern = substrRight(x = as.character(loc),n = 5),replacement = paste(" ",substrRight(x = as.character(loc),n = 5),sep=""),x = as.character(loc),ignore.case = T)}
loc.conv<-measurements::conv_unit(loc, from = 'deg_dec_min', to = 'dec_deg')
if(nsew=="S"){loc.conv<-paste("-",loc.conv,sep="")}
if(nsew=="W"){loc.conv<-paste("-",loc.conv,sep="")}
return(loc.conv)
}
########################################################################################
gps<-read.csv("test.data2.csv",header=F,na.strings = "")
#cp<-gps[grep(gps$V1,pattern = "CP"),]
#gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
gps$time<-strptime(gps$time,format="%H%M%S")
gps<-gps[-which(is.na(gps$lat)),]
# convert from degrees and decimal minutes to degrees
for(i in 1:nrow(gps))
{
gps$lat[i]<-convert.nmea.gps(loc = gps$lat[i],nsew = gps$n_s[i])
gps$lon[i]<-convert.nmea.gps(loc = gps$lon[i],nsew = gps$w_e[i])
}
gps
library(measurements)
library(leaflet)
########################################################################################
#define substring right function
substrRight<-function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc,nsew)
{
if(nsew=="N" | nsew=="S"){loc<-gsub(pattern = substrRight(x = as.character(loc),n = 7),replacement = paste(" ",substrRight(x = as.character(loc),n = 7),sep=""),x = as.character(loc),ignore.case = T)}
if(nsew=="W" | nsew=="E"){loc<-gsub(pattern = substrRight(x = as.character(loc),n = 6),replacement = paste(" ",substrRight(x = as.character(loc),n = 6),sep=""),x = as.character(loc),ignore.case = T)}
loc.conv<-measurements::conv_unit(loc, from = 'deg_dec_min', to = 'dec_deg')
if(nsew=="S"){loc.conv<-paste("-",loc.conv,sep="")}
if(nsew=="W"){loc.conv<-paste("-",loc.conv,sep="")}
return(loc.conv)
}
########################################################################################
gps<-read.csv("test.data2.csv",header=F,na.strings = "")
#cp<-gps[grep(gps$V1,pattern = "CP"),]
#gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
gps$time<-strptime(gps$time,format="%H%M%S")
gps<-gps[-which(is.na(gps$lat)),]
# convert from degrees and decimal minutes to degrees
for(i in 1:nrow(gps))
{
gps$lat[i]<-convert.nmea.gps(loc = gps$lat[i],nsew = gps$n_s[i])
gps$lon[i]<-convert.nmea.gps(loc = gps$lon[i],nsew = gps$w_e[i])
}
gps$lat<-as.numeric(gps$lat)
gps$lon<-as.numeric(gps$lon)
gps
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc,nsew)
{
if(nsew=="N" | nsew=="S"){loc<-gsub(pattern = substrRight(x = as.character(loc),n = 7),replacement = paste(" ",substrRight(x = as.character(loc),n = 7),sep=""),x = as.character(loc),ignore.case = T)}
if(nsew=="W" | nsew=="E"){loc<-gsub(pattern = substrRight(x = as.character(loc),n = 7),replacement = paste(" ",substrRight(x = as.character(loc),n = 7),sep=""),x = as.character(loc),ignore.case = T)}
loc.conv<-measurements::conv_unit(loc, from = 'deg_dec_min', to = 'dec_deg')
if(nsew=="S"){loc.conv<-paste("-",loc.conv,sep="")}
if(nsew=="W"){loc.conv<-paste("-",loc.conv,sep="")}
return(loc.conv)
}
########################################################################################
gps<-read.csv("test.data2.csv",header=F,na.strings = "")
#cp<-gps[grep(gps$V1,pattern = "CP"),]
#gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
gps$time<-strptime(gps$time,format="%H%M%S")
gps<-gps[-which(is.na(gps$lat)),]
# convert from degrees and decimal minutes to degrees
for(i in 1:nrow(gps))
{
gps$lat[i]<-convert.nmea.gps(loc = gps$lat[i],nsew = gps$n_s[i])
gps$lon[i]<-convert.nmea.gps(loc = gps$lon[i],nsew = gps$w_e[i])
}
gps$lat<-as.numeric(gps$lat)
gps$lon<-as.numeric(gps$lon)
gps
?measurements::conv_unit
View(gps)
gps<-read.csv("test.data2.csv",header=F,na.strings = "")
gps
if(nchar(loc)==6){loc<-paste("0",loc,sep="")}
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc,nsew)
{
if(nchar(loc)==6){loc<-paste("0",loc,sep="")}
loc<-gsub(pattern = substrRight(x = as.character(loc),n = 7),replacement = paste(" ",substrRight(x = as.character(loc),n = 7),sep=""),x = as.character(loc),ignore.case = T)
loc.conv<-measurements::conv_unit(loc, from = 'deg_dec_min', to = 'dec_deg')
return(loc.conv)
}
library(measurements)
library(leaflet)
########################################################################################
#define substring right function
substrRight<-function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc,nsew)
{
if(nchar(loc)==6){loc<-paste("0",loc,sep="")}
loc<-gsub(pattern = substrRight(x = as.character(loc),n = 7),replacement = paste(" ",substrRight(x = as.character(loc),n = 7),sep=""),x = as.character(loc),ignore.case = T)
loc.conv<-measurements::conv_unit(loc, from = 'deg_dec_min', to = 'dec_deg')
return(loc.conv)
}
########################################################################################
gps<-read.csv("test.data2.csv",header=F,na.strings = "")
#cp<-gps[grep(gps$V1,pattern = "CP"),]
#gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
gps$time<-strptime(gps$time,format="%H%M%S")
gps<-gps[-which(is.na(gps$lat)),]
# convert from degrees and decimal minutes to degrees
for(i in 1:nrow(gps))
{
gps$lat[i]<-convert.nmea.gps(loc = gps$lat[i],nsew = gps$n_s[i])
gps$lon[i]<-convert.nmea.gps(loc = gps$lon[i],nsew = gps$w_e[i])
}
library(measurements)
library(leaflet)
########################################################################################
#define substring right function
substrRight<-function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc,nsew)
{
if(nchar(loc)==6){loc<-paste("0",loc,sep="")}
loc<-gsub(pattern = substrRight(x = as.character(loc),n = 7),replacement = paste(" ",substrRight(x = as.character(loc),n = 7),sep=""),x = as.character(loc),ignore.case = T)
loc.conv<-measurements::conv_unit(loc, from = 'deg_dec_min', to = 'dec_deg')
return(loc.conv)
}
########################################################################################
gps<-read.csv("test.data2.csv",header=F,na.strings = "")
#cp<-gps[grep(gps$V1,pattern = "CP"),]
#gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
gps$time<-strptime(gps$time,format="%H%M%S")
gps<-gps[-which(is.na(gps$lat)),]
# convert from degrees and decimal minutes to degrees
i
gps$lon[i]
convert.nmea.gps(loc = gps$lon[i],nsew = gps$w_e[i])
loc<-21.755
nchar(loc)==6
loc<-paste("0",loc,sep="")
loc
substrRight(x = as.character(loc),n = 7),replacement = paste(" ",substrRight(x = as.character(loc),n = 7),sep=""),x = as.character(loc),ignore.case = T)
substrRight(x = as.character(loc),n = 7)
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc,nsew)
{
if(nchar(loc)==6){loc<-paste("00",loc,sep="")}
loc<-gsub(pattern = substrRight(x = as.character(loc),n = 7),replacement = paste(" ",substrRight(x = as.character(loc),n = 7),sep=""),x = as.character(loc),ignore.case = T)
loc.conv<-measurements::conv_unit(loc, from = 'deg_dec_min', to = 'dec_deg')
return(loc.conv)
}
if(nchar(loc)==6){loc<-paste("00",loc,sep="")}
loc
library(measurements)
library(leaflet)
########################################################################################
#define substring right function
substrRight<-function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc,nsew)
{
if(nchar(loc)==6){loc<-paste("00",loc,sep="")}
loc<-gsub(pattern = substrRight(x = as.character(loc),n = 7),replacement = paste(" ",substrRight(x = as.character(loc),n = 7),sep=""),x = as.character(loc),ignore.case = T)
loc.conv<-measurements::conv_unit(loc, from = 'deg_dec_min', to = 'dec_deg')
return(loc.conv)
}
gps<-read.csv("test.data2.csv",header=F,na.strings = "")
if(nchar(loc)==6){loc<-paste("00",loc,sep="")}
loc
library(measurements)
library(leaflet)
########################################################################################
#define substring right function
substrRight<-function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc,nsew)
{
if(nchar(loc)==6){loc<-paste("00",loc,sep="")}
loc<-gsub(pattern = substrRight(x = as.character(loc),n = 7),replacement = paste(" ",substrRight(x = as.character(loc),n = 7),sep=""),x = as.character(loc),ignore.case = T)
loc.conv<-measurements::conv_unit(loc, from = 'deg_dec_min', to = 'dec_deg')
return(loc.conv)
}
########################################################################################
gps<-read.csv("test.data2.csv",header=F,na.strings = "")
#cp<-gps[grep(gps$V1,pattern = "CP"),]
#gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
gps$time<-strptime(gps$time,format="%H%M%S")
gps<-gps[-which(is.na(gps$lat)),]
# convert from degrees and decimal minutes to degrees
gps$lat[i]
gps$lon[i]
loc<-gps$lon[i]
loc
convert.nmea.gps(loc = gps$lon[i],nsew = gps$w_e[i])
for(i in 1:nrow(gps))
{
gps$lat[i]<-convert.nmea.gps(loc = gps$lat[i],nsew = gps$n_s[i])
gps$lon[i]<-convert.nmea.gps(loc = gps$lon[i],nsew = gps$w_e[i])
}
library(measurements)
library(leaflet)
########################################################################################
#define substring right function
substrRight<-function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc,nsew)
{
if(nchar(loc)==6){loc<-paste("00",loc,sep="")}
loc<-gsub(pattern = substrRight(x = as.character(loc),n = 7),replacement = paste(" ",substrRight(x = as.character(loc),n = 7),sep=""),x = as.character(loc),ignore.case = T)
loc.conv<-measurements::conv_unit(loc, from = 'deg_dec_min', to = 'dec_deg')
return(loc.conv)
}
########################################################################################
gps<-read.csv("test.data2.csv",header=F,na.strings = "")
#cp<-gps[grep(gps$V1,pattern = "CP"),]
#gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
gps$time<-strptime(gps$time,format="%H%M%S")
gps<-gps[-which(is.na(gps$lat)),]
# convert from degrees and decimal minutes to degrees
gregexpr(pattern ='.',loc)
gregexpr(pattern ='\\.',loc)
gregexpr(pattern ='\\.',loc)[[1]]
gregexpr(pattern ='\\.',loc)[1]
unlist(gregexpr(pattern ='\\.',loc)()
unlist(gregexpr(pattern ='\\.',loc))
pointplace<-unlist(gregexpr(pattern ='\\.',loc))
pointplace
n.characters<-nchar(loc)
n.characters
degrees<-substr(loc,start = 1,stop = pointplace-1)
degrees
mins<-substr(loc,pointplace+1,n.characters)
loc
degrees<-substr(loc,start = 1,stop = pointplace-3)
degrees
degrees==""
if(degrees==""){degrees<-0}
degrees
mins<-substr(loc,pointplace-2,n.characters)
mins
mins<-mins/60
loc<-paste(degrees,mins,sep=".")
loc
degrees
loc<-degrees+minutes
loc<-gsp$lat[73]
loc<-gps$lat[73]
loc
pointplace<-unlist(gregexpr(pattern ='\\.',loc))
n.characters<-nchar(loc)
degrees<-substr(loc,start = 1,stop = pointplace-3)
if(degrees==""){degrees<-0}
mins<-substr(loc,pointplace-2,n.characters)
degrees
mins
mins<-mins/60
mins
mins<-as.numeric(mins)/60
mins
loc<-degrees+mins
loc<-as.numeric(degrees)+mins
loc
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc)
{
pointplace<-unlist(gregexpr(pattern ='\\.',loc))
n.characters<-nchar(loc)
degrees<-substr(loc,start = 1,stop = pointplace-3)
if(degrees==""){degrees<-0}
mins<-substr(loc,pointplace-2,n.characters)
mins<-as.numeric(mins)/60
loc<-as.numeric(degrees)+mins
return(loc)
}
library(measurements)
library(leaflet)
########################################################################################
#define substring right function
substrRight<-function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc)
{
pointplace<-unlist(gregexpr(pattern ='\\.',loc))
n.characters<-nchar(loc)
degrees<-substr(loc,start = 1,stop = pointplace-3)
if(degrees==""){degrees<-0}
mins<-substr(loc,pointplace-2,n.characters)
mins<-as.numeric(mins)/60
loc<-as.numeric(degrees)+mins
return(loc)
}
########################################################################################
gps<-read.csv("test.data2.csv",header=F,na.strings = "")
#cp<-gps[grep(gps$V1,pattern = "CP"),]
#gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
gps$time<-strptime(gps$time,format="%H%M%S")
gps<-gps[-which(is.na(gps$lat)),]
# convert from degrees and decimal minutes to degrees
for(i in 1:nrow(gps))
{
gps$lat[i]<-convert.nmea.gps(loc = gps$lat[i],nsew = gps$n_s[i])
gps$lon[i]<-convert.nmea.gps(loc = gps$lon[i],nsew = gps$w_e[i])
}
library(measurements)
library(leaflet)
########################################################################################
#define substring right function
substrRight<-function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc)
{
pointplace<-unlist(gregexpr(pattern ='\\.',loc))
n.characters<-nchar(loc)
degrees<-substr(loc,start = 1,stop = pointplace-3)
if(degrees==""){degrees<-0}
mins<-substr(loc,pointplace-2,n.characters)
mins<-as.numeric(mins)/60
loc<-as.numeric(degrees)+mins
return(loc)
}
########################################################################################
gps<-read.csv("test.data2.csv",header=F,na.strings = "")
#cp<-gps[grep(gps$V1,pattern = "CP"),]
#gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
gps$time<-strptime(gps$time,format="%H%M%S")
gps<-gps[-which(is.na(gps$lat)),]
# convert from degrees and decimal minutes to degrees
for(i in 1:nrow(gps))
{
gps$lat[i]<-convert.nmea.gps(loc = gps$lat[i])
gps$lon[i]<-convert.nmea.gps(loc = gps$lon[i])
}
gps$lat<-as.numeric(gps$lat)
gps$lon<-as.numeric(gps$lon)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=gps$lon, lat=gps$lat)
m  # Print the map
gps$lon
loc
-loc
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc,nsew)
{
pointplace<-unlist(gregexpr(pattern ='\\.',loc))
n.characters<-nchar(loc)
degrees<-substr(loc,start = 1,stop = pointplace-3)
if(degrees==""){degrees<-0}
mins<-substr(loc,pointplace-2,n.characters)
mins<-as.numeric(mins)/60
loc<-as.numeric(degrees)+mins
if(nsew=="W" | nsew == "S"){loc<--loc}
return(loc)
}
library(measurements)
library(leaflet)
########################################################################################
#define substring right function
substrRight<-function(x, n){substr(x, nchar(x)-n+1, nchar(x))}
########################################################################################
# define nmea gps conversion function
convert.nmea.gps<-function(loc,nsew)
{
pointplace<-unlist(gregexpr(pattern ='\\.',loc))
n.characters<-nchar(loc)
degrees<-substr(loc,start = 1,stop = pointplace-3)
if(degrees==""){degrees<-0}
mins<-substr(loc,pointplace-2,n.characters)
mins<-as.numeric(mins)/60
loc<-as.numeric(degrees)+mins
if(nsew=="W" | nsew == "S"){loc<--loc}
return(loc)
}
########################################################################################
gps<-read.csv("test.data2.csv",header=F,na.strings = "")
#cp<-gps[grep(gps$V1,pattern = "CP"),]
#gps<-gps[-grep(gps$V1,pattern = "CP"),]
gps<-as.data.frame(gps)
names(gps)<-c("time","lat","n_s","lon","w_e","fix_quality","num_satellites","horz_dilution_position","altitude_m","height_geoid","time_since_last_DGPS_update","dgps_station_id_number","empty","checksum")
gps$APCP<-substr(gps$time,start = 2,stop = 3)
gps$time<-substr(gps$time,start = 4,14)
gps$time<-as.integer(gps$time)
gps<-gps[!is.na(gps$time),]
gps$time[which(nchar(gps$time)==5)]<-paste("0",gps$time[which(nchar(gps$time)==5)],sep="")
gps$time<-strptime(gps$time,format="%H%M%S")
gps<-gps[-which(is.na(gps$lat)),]
# convert from degrees and decimal minutes to degrees
for(i in 1:nrow(gps))
{
gps$lat[i]<-convert.nmea.gps(loc = gps$lat[i],nsew = gps$n_s)
gps$lon[i]<-convert.nmea.gps(loc = gps$lon[i],nsew = gps$w_e)
}
gps$lat<-as.numeric(gps$lat)
gps$lon<-as.numeric(gps$lon)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=gps$lon, lat=gps$lat)
m  # Print the map
View(gps)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng=gps$lon, lat=gps$lat)
m  # Print the map
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng=gps$lon, lat=gps$lat,radius = 1)
m  # Print the map
